가벼운 마음으로 한주에 100장 이내를 읽는다고 생각하자

이 책을 읽기 위한 기본적인 소양교육
코딩 학문적인 차원에서 ㄷ모티베이션 현대사회에서 돈
왜 그렇게 짰어? 돈이 덜드니까 돈 버니까

왜 그런지 생각
- 철학

- 일관되게 적용할수 있는 사고의 틀
- 가치와 원칙을 베이스로 해서 반복되면 패턴이 나온다.
- 켄트백 알고리즘 시험보고 페이스북 입사했다.
- 이 3가지 외에도 Xoriented 패러다임에 가까운 사고의 틀들이 존재한다.
- 우리가 배우는 패러다임도 오리엔트 오브젝트이다. 어떻게 적용한다하면 패턴이 다르게 적용된다.
- 이러한 모양의 계층적인 사고의 틀을 대해서 프로그램을 왜짯니
- 철학적인 사고를 : 토마스쿤(과학은 상대적이다) 천동설이라 ㅁ믿으면 천동설  과학혁명의 구조 시대에 따라서 사람에 따라서 Relativism
- Rationalism : 러커토시 임레( 수학적 발견의논리 : 증명과 반박)과학은 합리적이다. 
- 난장판 : 파울 파이어아벤트(방법에의 도전)과 그 이후

- 상대주의화 합리주의는 과학사에서 나오는것이아니다.

- 사람들은 환산할만한 가치가 있다.
- Communication
    - 개발을 할때는 커뮤니케이션이 잘되는 방향으로 짜라
    - 워킹하는 거 외에도.
- Simplicity
    - 되도록이면 간단하게 짜라.
- Flexibility
    - 유연하게 짜라
    - 사람들 마음속에 유연하면 복잡해진다 라고 생각한다 보통
    - 간단한 얘들은 재활용 할수있다.
- 유연성을 얻으려면 간단하게 짜라
- 둘다 얻으면 커뮤니케이션이 쉬울것이다.

- 원칙
    - Local consequences (변수의 생명주기를 짧게 가져가라)
        - 아무일도 없으면 가만히 있을거란 원칙을 지키고 있다.
        - 누군가 손을 들자마자 조취를 치할수 있다.
        - 서있기도 하고 잡스러운걸 할때 파악하기가 힘들따
        - 예외적으로 조치를 취할수 있기때문에 원칙을 지켜야한다.
        - 여러한 레이어에 거쳐서 만들어진다.
        - 회사원 팀원 국가 등등. 다양한 그룹속에서 하나의 원칙만 지키는것이 아니다.
        - 지키지 않는 사람들이 팽배하면 기능을 잃어버린다.
    - Minimize repetition(중복은 최소화 해라)
        - 중복은 제거하는것이 아니라 반복하는것이다.
        - 실력이 높아지면 반복이 보인다.
        - 코드가 중복이 적다고 생각하면 그 수준때이다.
    - Symmetry
        - Dry원칙
        - Getter만들었으면 Setter만들어
        - 사람은 이분법적 사고만 나온다.
        - 흑백논리를 생각한다.
        - 우리가 원숭이 신속한 행동을 필요한다.
        - 즉각적인 의사소통
        - 이진트리가 구축이 안되면 당황한다.
        - 되도록이면 짝을 맞추자
    - Convention
        - 다양한 컨벤션을 지키라
        - 컨텍스트 코듣 등
    - 약속을 만들어서 지키고 틀리면 버그로 간주하자.
- Xoriented
    - OOP : SOLID ,  DRY,
        - 불변성을 강요하지 않음
    - Reactive 
    - Functional

- 패턴들을 정리해서 최고 예시를 만들면 비용이 적어진다.
- 미국 소프트웨어시장 의 50퍼는 디버깅에 사용한다.
- IT는 100프로 인건비다.
- 사람 = 돈
- 시설인 중심인 공장은 사람을 줄였다고 돈이 줄었다고 하지않는다.

- 우리들 시간만 적게쓰면 돈을 적게쓴다.
- 코드짜는데 25만 쓴다.
- 추가요청사항 변경사항등이 오면 요구사항 바뀌면 도 바꾼다.

- 이시대에서는 코드가 유연하게 받아질수있도록 설계를 잘해야한다.
- 더욱더 과거와 달리 요구사항이 정해져서 오는것이 없다.
- 뭔지도 모르는 자기도 모르는 요구사항들이 온다.
- 보여줄때마다 요구사항이 달라진다.
- 잔인한 시장이다.
- 납기 만료일이 정해져 있다.
- 요구사항이 바뀔때 뒤집어 엎고 하지 않는다.
- 어떻게에 대해서? 
- 변화에 따른 격리의 성공
- 어떤 요구사항들은 1주일마다 바뀔수 있게 격리되어있다.
- 요구사항이 올때 추가해주면 원래 코드에는 문제가 없다.
- 복잡성 폭발로 인해 바꿔야한다.
- 격리하면돼, 어떻게 하지?
- 객체지향진영에서 역할모델 외에는 엔터프라이즈 규모나 도메인을 격리시킬수 있는 방법을 찾을수 없다.
- 그간의 경험을 보면 빠른 사람은 3년 보통은 5년 이 걸린다. 
- 프로그램을 격리하는 방법을 아는 순간부터 입장권을 끊은 상태이다.

- Abstraction 추상화를 이해해야 한다.

- 이책전체가 추상화를 이해해야한다.
    - Generalization : 일반화 - modeling , function , algorithm
    - Association : 연관화 - reference , dependence
    - Aggregation : 집단화 - group , category

